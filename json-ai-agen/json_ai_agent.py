# -*- coding: utf-8 -*-
"""JSON-ai-agent.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1NchMTOCS1wC93JG3s-5Gj7aBihdhL0Vu
"""

pockemon_card = {
    "name": "Pikachu",
    "type": "Electric",
    "HP": 100,
}

schema = {
    "type": "object",
    "properties": {
        "name": {"type": "string"},
        "type": {"type": "string"},
        "HP": {"type": "integer"},
    },
    "required": ["name", "type", "hp"]
}

exapmle = """
{
    "name": "Pikachu",
    "type": "Electric",
    "HP": 100,
}
 """

schema_string = """ {
    "type": "object",
    "properties": {
        "name": {"type": "string"},
        "type": {"type": "string"},
        "HP": {"type": "integer"},
    },
    "required": ["name", "type", "hp"]
} """

from openai import OpenAI
from google.colab import userdata

client= OpenAI(
    api_key=userdata.get('TOGETHER_API_KEY_NEW'),
    base_url='https://api.together.xyz/v1'
)

completion = client.chat.completions.create(
    model="meta-llama/Meta-Llama-3.1-70B-Instruct-Turbo",
    messages=[
        {"role": "user",
         "content": "Generate a pokemon card. use JSON, and awlwys respones in this format: "}],
  response_format={"type": "json_object", "schema": schema}

)

print(completion.choices[0].message.content)

tools = [{
    "type": "function",
    "function": {
        "name": "calculator",
        "description": "Useful for when you need to answer questions about math. Use SymPy expresions, eg 2+2",
        "parameters": {
            "type": "object",
            "properties": {
                "expression": { "type": "string" }
            }
        }
    }
}, {
    "type": "function",
    "function": {
        "name": "check_weather",
        "description": "Useful for when you need to check the weather!",
        "parameters": {
            "type": "object",
            "properties": {
                "city_name": { "type": "string", "description": "The name of a city NOT a country" }
            }
        }
    }
}]

completion = client.chat.completions.create(
  model="meta-llama/Llama-3.3-70B-Instruct-Turbo-Free",
  messages=[
    {
        "role": "user",
        "content": "What's the weather in France today?"
    }
  ],
  tools=tools
)

print(completion.choices[0].message.tool_calls[0].function.arguments)
print(completion.choices[0].message.tool_calls[0].function.name)

import requests

def get_weather(city):
  api_key = userdata.get('WEATHER_API_KEY')
  url = f"http://api.weatherapi.com/v1/current.json?key={api_key}&q={city}&aqi=no"
  response = requests.get(url)
  weather_data = response.json()
  return weather_data

# Example usage
city = "Karachi"
weather_data = get_weather(city)
print(weather_data)

import json

chat_history=[
    {
        "role": "user",
        "content": "What's the weather in France today?"
    }
  ]

while True:

  completion = client.chat.completions.create(
    model="meta-llama/Llama-3.3-70B-Instruct-Turbo-Free",
    messages=chat_history,
    tools=tools
  )

  tool_calls = completion.choices[0].message.tool_calls

  if tool_calls:
    arguments = tool_calls[0].function.arguments
    print(arguments)
    name = tool_calls[0].function.name
    print(name)

    chat_history.append(completion.choices[0].message)

    if name == "check_weather":
      city = json.loads(arguments)["city_name"]
      weather_data = get_weather(city)
      chat_history.append({
          "role": "function",
          "name": name,
          "content": json.dumps(weather_data)
      })
  else:
    print(completion.choices[0].message.content)
    break