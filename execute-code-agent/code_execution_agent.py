# -*- coding: utf-8 -*-
"""code-execution-agent.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1QkUc7Zc1iS1VeWQyoY2gzSeQB8bCqXsd
"""

from openai import OpenAI
from google.colab import userdata
client = OpenAI(
    base_url="https://api.together.xyz/v1",
    api_key= userdata.get("TOGETHER_API_KEY_NEW")
)



completion = client.chat.completions.create(
    model="meta-llama/Llama-3.3-70B-Instruct-Turbo-Free",
    messages=[
        # {"role": "user", "content": "write code to count the number of letters A's in word bannana"}
        {"role": "user", "content": "implement fizz buzz in python"}
        ],
)

result = completion.choices[0].message.content

print(result)

import re

def extract_code_block(text):
    # Pattern to match fenced code blocks
    # Matches: ```language\ncode\n``` or ```language\r\ncode\r\n```
    pattern = r"```(\w*)\r?\n(.*?)\r?\n```"

    # re.DOTALL flag allows . to match newlines
    match = re.search(pattern, text, re.DOTALL)

    if match:
        language = match.group(1).lower() or None
        code = match.group(2)
        return language, code

    return None, None

print(extract_code_block(result)[0])

print(extract_code_block(result)[1])

!pip install e2b-code-interpreter

print(userdata.get("E2B_API_KEY"))

from e2b_code_interpreter import Sandbox
extracted_code = extract_code_block(result)[1]
sbx = Sandbox(
    api_key=userdata.get("E2B_API_KEY")
) # by defult 5 minutes
exexution = sbx.run_code(extracted_code)  # exexute python inside the sandbox
print(exexution.logs)
sbx.kill()

print(exexution.logs.stdout[0])

print(userdata.get("E2B_API_KEY"))

chat_history = [
           {"role": "system", "content": """
    Write Python code that you can run to answer the user's requests.
    Always trust the output of the code (assistant) as true and summarize the output of the code to the user.
    """},
        {"role": "user", "content": "Tell me about the GitHub user nasserml. You can use the GitHub API. What do you think about his coding skills?"}
        ]

sbx = Sandbox(
    api_key=userdata.get("E2B_API_KEY")
)

while True:
  completion = client.chat.completions.create(
    model="meta-llama/Llama-3.3-70B-Instruct-Turbo-Free",
    messages= chat_history)

  response = completion.choices[0].message.content
  chat_history.append( {"role": "system", "content": response})
  language, code = extract_code_block(response)
  print("============================================resp")
  print(response)
  print("="*100)

  if code:
    execution = sbx.run_code(code)  # exexute python inside the sandbox
    chat_history.append({"role": "assistant", "content": "I have run the code and the output of the code is:\n"+ execution.logs.stdout[0][:5000] })
    print("==================================code exe sndbox ==========================================================")
    print(execution.logs.stdout[0])

    if execution.error:
      print(  "Error ==============================================")
      print(execution.error)
      chat_history.append({
          "role":"assistant",
          "content": execution.error
      })


  else:
    sbx.kill()
    break

chat_history